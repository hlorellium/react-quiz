{"version":3,"sources":["images/tyler-devine.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","userAnswer","questionNr","totalQuestions","callback","className","dangerouslySetInnerHTML","__html","answer","key","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56829a20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tyler-devine.5da212d4.jpg\";","import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `http://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5 );","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 1px solid #fff;\r\n  padding: 20px;\r\n  margin: 2rem;\r\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0, 12);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n  .name {\r\n    margin: 2rem;\r\n  }\r\n`;\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3 ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 2px soild #fff;\r\n    box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    \r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n  callback,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: {questionNr} / {totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }}></p>\r\n      <div>\r\n        {answers.map((answer) => {\r\n          return (\r\n            <ButtonWrapper\r\n              key={answer}\r\n              correct={userAnswer?.correct_answer === answer}\r\n              userClicked={userAnswer?.answer === answer}\r\n            >\r\n              <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n              </button>\r\n            </ButtonWrapper>\r\n          );\r\n        })}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport BGImage from \"./images/tyler-devine.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family:  'Open Sans';\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: white;\r\n  }\r\n  .score {\r\n    color: white;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: \"Open Sans\";\r\n    color: #fff;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n\r\n    filter: drop-shadow(2px 2px #b351ff);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start,\r\n  .next {\r\n    display: inline-block;\r\n    border-radius: 3px;\r\n    padding: 0.5rem 0;\r\n    margin: 0.5rem 1rem;\r\n    width: 11rem;\r\n    background: transparent;\r\n    color: white;\r\n    border: 2px solid white;\r\n    cursor: pointer;\r\n    -webkit-transition: all 0.2s 0s ease-in-out;\r\n    -moz-transition: all 0.2s 0s ease-in-out;\r\n    -o-transition: all 0.2s 0s ease-in-out;\r\n    transition: all 0.2s 0s ease-in-out;\r\n  }\r\n  .start:hover,\r\n  .next:hover {\r\n    background-color: rgba(217, 168, 255, 0.1);\r\n    -webkit-transition: all 0.3s 0s ease-in-out;\r\n    -moz-transition: all 0.3s 0s ease-in-out;\r\n    -o-transition: all 0.3s 0s ease-in-out;\r\n    transition: all 0.3s 0s ease-in-out;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { fetchQuizQuestions } from \"./API\";\r\n// Components\r\nimport QuestionCard from \"./components/QuestionCard\";\r\n// Types\r\nimport { QuestionState, Difficulty } from \"./API\";\r\n// Styles\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correct_answer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n  const startTrivia = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n\r\n    const newQuestions = await fetchQuizQuestions(\r\n      TOTAL_QUESTIONS,\r\n      Difficulty.EASY\r\n    );\r\n\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      // User answers\r\n      const answer = e.currentTarget.value;\r\n      // Check answer against correct answer\r\n      const correct = questions[number].correct_answer === answer;\r\n      // Add score if answer is correct\r\n      correct && setScore((prev) => prev + 1);\r\n      // Save answer in the arr for user answers\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correct_answer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    // Move to the next question\r\n    const nextQuestion = number + 1;\r\n\r\n    if (nextQuestion === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    } else {\r\n      setNumber(nextQuestion);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n        <Wrapper>\r\n          <h1>REACT QUIZ</h1>\r\n          {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n            <button className=\"start\" onClick={startTrivia}>\r\n              Start\r\n            </button>\r\n          ) : null}\r\n          {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\r\n          {loading && <p>Loading Questions ...</p>}\r\n          {!loading && !gameOver && (\r\n            <QuestionCard\r\n              questionNr={number + 1}\r\n              totalQuestions={TOTAL_QUESTIONS}\r\n              question={questions[number].question}\r\n              answers={questions[number].answers}\r\n              userAnswer={userAnswers && userAnswers[number]}\r\n              callback={checkAnswer}\r\n            />\r\n          )}\r\n          {!gameOver &&\r\n          !loading &&\r\n          userAnswers.length === number + 1 &&\r\n          number !== TOTAL_QUESTIONS - 1 ? (\r\n            <button className=\"next\" onClick={nextQuestion}>\r\n              Next question\r\n            </button>\r\n          ) : null}\r\n        </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}